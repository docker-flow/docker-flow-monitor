#!/usr/bin/env node
/* eslint-disable no-multi-spaces */

/**
 * Module dependencies.
 */
const app     = require('../app')
const certGen = require('../config/certGen').certGen
const debug   = require('debug')('phoenix-kata:server')
const http    = require('http')

/**
 * Prometheus imports
 * @module Prometheus client
 */
exports.register = require('../lib/registry').globalRegistry
exports.Registry = require('../lib/registry')
exports.contentType = require('../lib/registry').globalRegistry.contentType
exports.validateMetricName = require('../lib/validation').validateMetricName
exports.Counter = require('../lib/counter')
exports.Gauge = require('../lib/gauge')
exports.Histogram = require('../lib/histogram')
exports.Summary = require('../lib/summary')
exports.Pushgateway = require('../lib/pushgateway')
exports.linearBuckets = require('../lib/bucketGenerators').linearBuckets
exports.exponentialBuckets = require('../lib/bucketGenerators').exponentialBuckets
exports.collectDefaultMetrics = require('../lib/defaultMetrics')
exports.aggregators = require('../lib/metricAggregators').aggregators
exports.AggregatorRegistry = require('../lib/cluster')

require('../lib/metrics/server_metrics.js')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)

  certGen()
}
